const fs = require('fs')
const path = require('path')
const koa = require('koa')
const favicon = require('koa-favicon')
const compression = require('koa-compress')
const route = require('koa-route')
const PassThrough = require('stream').PassThrough
const serialize = require('serialize-javascript')
const resolve = file => path.resolve(__dirname, file)
const isProd = process.env.NODE_ENV === 'production'
const serverInfo =
  `koa/${require('koa/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = new koa()

let indexHTML // generated by html-webpack-plugin
let renderer  // created from the webpack-generated server bundle
if (isProd) {
  // in production: create server renderer and index HTML from real fs
  renderer = createRenderer(fs.readFileSync(resolve('./dist/server-bundle.js'), 'utf-8'))
  indexHTML = parseIndex(fs.readFileSync(resolve('./dist/index.html'), 'utf-8'))
} else {
  // in development: setup the dev server with watch and hot-reload,
  // and update renderer / index HTML on file change.
  require('./build/setup-dev-server')(app, {
    bundleUpdated: bundle => {
      renderer = createRenderer(bundle)
    },
    indexUpdated: index => {
      indexHTML = parseIndex(index)
    }
  })
}

function createRenderer(bundle) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return require('vue-server-renderer').createBundleRenderer(bundle, {
    cache: require('lru-cache')({
      max: 1000,
      maxAge: 1000 * 60 * 15
    })
  })
}

function parseIndex(template) {
  const contentMarker = '<!-- APP -->'
  const i = template.indexOf(contentMarker)
  return {
    head: template.slice(0, i),
    tail: template.slice(i + contentMarker.length)
  }
}

const serve = (path, namespace, cache) => {
  const config = {
    maxage: cache && isProd ? 60 * 60 * 24 * 30 : 0,
  }
  if (namespace) {
    config.namespace = namespace
  }
  return require('koa-static-namespace')(resolve(path), config)
}

app.use(compression({threshold: 0}))
app.use(favicon('./public/logo-48.png'))
app.use(serve('./dist'))
app.use(serve('./dist', '/dist'))
app.use(serve('./public', '/public'))
app.use(serve('./manifest.json'))

app.use(route.get('*', function *() {
  const ctx = this
  if (!renderer) {
    this.body = 'waiting for compilation... refresh in a moment.'
  }
  this.set('Content-Type', 'text/html')
  this.set('Server', serverInfo)

  const s = Date.now()
  const context = {url: this.request.url}
  const renderStream = renderer.renderToStream(context)

  const stream = new PassThrough()
  this.body = stream

  renderStream.once('data', () => {
    stream.write(indexHTML.head)
  })
  renderStream.on('data', chunk => {
    stream.write(chunk)
  })
  renderStream.on('end', () => {
    if (context.initialState) {
      stream.write(
        `<script>window.__INITIAL_STATE__=${
          serialize(context.initialState, {isJSON: true})
          }</script>`
      )
    }
    stream.end(indexHTML.tail)
    console.log(`whole request: ${Date.now() - s}ms`)
  })
  renderStream.on('error', err => {
    if (err && err.code === '404') {
      stream.end('404 | Page Not Found')
      this.status = 404
      return
    }
    stream.end('Server Error')
    this.status = err.code || 500
    console.error(`error during render : ${this.req.url}`)
    console.error(err)
  })
  // renderStream.on('error', this.onerror)
}))

const port = process.env.PORT || 8080
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})
